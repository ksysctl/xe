{"version":3,"sources":["layout/logo.svg","layout/Header.js","content/controls/Control.js","content/controls/Dropdown.js","content/controls/Numeric.js","content/controls/Summary.js","content/controls/Message.js","content/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","title","this","props","className","src","logo","alt","href","target","rel","React","Component","Control","setErrorClass","validations","Dropdown","htmlFor","id","display","name","value","onChange","action","required","options","Numeric","type","placeholder","Summary","clicked","amount","from","result","to","rate","timestamp","Message","error","role","API_URL","API_KEY","Form","setAPIError","message","setState","prevState","event","onChangeNumeric","status","Object","assign","state","onSubmit","fetch","then","res","json","success","code","convert","Intl","NumberFormat","format","query","info","DateTimeFormat","year","month","day","hour","minute","second","toString","preventDefault","currencies","bind","symbols","keys","map","key","option","App","header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5c1474d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c8582efa.svg\";","import React from 'react';\nimport logo from './logo.svg';\n\nclass Header extends React.Component {\n    render() {\n        const { title } = this.props;\n\n        return (\n            <header className=\"App-header\">\n                <img src={ logo } className=\"App-logo\" alt=\"logo\"/>\n                <p>{ title }</p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://fixer.io\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    XE uses fixer.io API\n                </a>\n            </header>\n        );\n    };\n}\n\nexport default Header;","import React from 'react';\n\nclass Control extends React.Component {\n    setErrorClass = () => {\n        if (this.props.validations) {\n            return \"is-invalid\";\n        } else {\n            return \"is-valid\";\n        }\n    };\n}\n\nexport default Control;","import React from 'react';\nimport Control from './Control';\n\nclass Dropdown extends Control {\n    render() {\n        return (\n            <div className=\"col-md-4 mb-3\">\n                <label htmlFor={ this.props.id }>\n                    { this.props.display }\n                </label>\n                <select\n                    name={ this.props.id }\n                    id={ this.props.id }\n                    value={ this.props.value }\n                    onChange={ this.props.action }\n                    required\n                    className={`form-control ${this.setErrorClass()}`}\n                >\n                    {this.props.options}\n                </select>\n\n                <div className=\"invalid-feedback\">\n                    { this.props.validations }\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Dropdown;","import React from 'react';\nimport Control from './Control';\n\nclass Numeric extends Control {\n    render() {\n        return (\n            <div className=\"col-md-4 mb-3\">\n                <label htmlFor={ this.props.id }>\n                    { this.props.display }\n                </label>\n                <input\n                    type=\"number\"\n                    name={ this.props.id }\n                    id={ this.props.id }\n                    value={ this.props.value }\n                    placeholder={ this.props.placeholder }\n                    onChange={ this.props.action }\n                    required\n                    className={`form-control ${this.setErrorClass()}`}\n                />\n\n                <div className=\"invalid-feedback\">\n                    { this.props.validations }\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Numeric;","import React from 'react';\n\nclass Summary extends React.Component {\n    setErrorClass = () => {\n        if (this.props.validations || !this.props.clicked) {\n            return \"d-none\";\n        } else {\n            return \"\";\n        }\n    };\n\n    render() {\n        return (\n            <div className={`center-block ${this.setErrorClass()}`}>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item font-weight-bold\">\n                        <span className=\"result-md\">{ this.props.amount } { this.props.from } = </span>\n                        <span className=\"result-lg\">{ this.props.result } </span>\n                        <span className=\"result-md\">{ this.props.to }</span>\n                    </li>\n                    <li className=\"list-group-item font-weight-bold\">\n                            <span className=\"result-sm\">\n                                1 { this.props.from } = { this.props.rate } { this.props.to }\n                            </span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <small className=\"text-muted\">Last updated: { this.props.timestamp }</small>\n                    </li>\n                </ul>\n            </div>\n        );\n    };\n}\n\nexport default Summary;","import React from 'react';\n\nclass Message extends React.Component {\n    setErrorClass = () => {\n        if (this.props.error) {\n            return \"\";\n        } else {\n            return \"d-none\";\n        }\n    };\n\n    render() {\n        return (\n            <div className={`alert alert-warning center-block ${this.setErrorClass()}`} role=\"alert\">\n                { this.props.error }\n            </div>\n        );\n    };\n}\n\nexport default Message;","import React from 'react';\nimport Dropdown from './controls/Dropdown';\nimport Numeric from './controls/Numeric';\nimport Summary from './controls/Summary';\nimport Message from './controls/Message';\n\nimport convert from './payload/convert.json';\nimport symbols from './payload/symbols.json';\n\nconst API_URL = 'https://data.fixer.io/api/';\nconst API_KEY = 'f1b1366b496bedfeeecb78075a2d1c3d';\nconst API_ENDPOINT_SYMBOLS = 'symbols';\nconst API_ENDPOINT_CONVERT = 'convert';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clicked: false,\n            amount: 1,\n            from: 'CRC',\n            to: 'USD',\n            result: '',\n            timestamp: '',\n            rate: '',\n            currencies: [],\n            error: '',\n            validations: {\n                amount: '',\n                from: '',\n                to: ''\n            }\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(`${API_URL}${API_ENDPOINT_SYMBOLS}?access_key=${API_KEY}`)\n            .then(res => res.json())\n            .then(\n                (res) => {\n                    if (res && !res.success && res.error.code === 105) {\n                        res = symbols;\n\n                        this.setState({\n                            error: 'Using mock response due to API limitations'\n                        });\n                    }\n\n                    if (res && res.success) {\n                        this.setState({\n                            currencies: Object.keys(res.symbols).map((key) => {\n                                return {\n                                    value: key,\n                                    name: res.symbols[key]\n                                };\n                            })\n                        });\n\n                        this.setState({\n                            options: this.state.currencies.map((option) =>\n                                <option key={option.value} value={option.value}>{option.name}</option>\n                            )\n                        });\n                    } else if (!res) {\n                        this.setState({\n                            error: 'Failed to load response data'\n                        });\n\n                        this.setAPIError();\n                    } else {\n                        this.setState({\n                            error: res.error.info\n                        });\n\n                        this.setAPIError();\n                    }\n                },\n                (error) => {\n                    this.setState({\n                        error: error.toString()\n                    });\n\n                    this.setAPIError();\n                }\n            )\n    }\n\n    setAPIError = () => {\n        let message = 'Currencies no available';\n\n        this.setState(prevState => {\n            const validations = {\n                ...prevState.validations\n            };\n\n            validations.from = message;\n            validations.to = message;\n\n            return {\n                validations\n            }\n        })\n    };\n\n    onChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    onChangeNumeric = (event) => {\n        this.onChange(event);\n\n        let amount = event.target.value;\n        const status = Object.assign({}, this.state);\n\n        if (!amount) {\n            status.validations.amount = 'Amount is required';\n        } else if (amount <= 0) {\n            status.validations.amount = 'Amount must be positive';\n        } else {\n            status.validations.amount = '';\n        }\n    };\n\n    onSubmit = (event) => {\n        fetch(`${API_URL}${API_ENDPOINT_CONVERT}?access_key=${API_KEY}&from=${this.state.from}&to=${this.state.to}&amount=${this.state.amount}`)\n            .then(res => res.json())\n            .then(\n                (res) => {\n                    if (res && !res.success && res.error.code === 105) {\n                        res = convert;\n\n                        this.setState({\n                            error: 'Using mock response due to API limitations'\n                        });\n                    }\n\n                    if (res && res.success) {\n                        this.setState({amount: new Intl.NumberFormat('en-US').format(res.query.amount)});\n                        this.setState({from: res.query.from});\n                        this.setState({to: res.query.to});\n\n                        this.setState({result: new Intl.NumberFormat('en-US').format(res.result)});\n                        this.setState({rate: new Intl.NumberFormat('en-US').format(res.info.rate)});\n\n                        this.setState({\n                            timestamp:\n                                new Intl.DateTimeFormat(\n                                    'en-US', {\n                                        year: 'numeric',\n                                        month: '2-digit',\n                                        day: '2-digit',\n                                        hour: '2-digit',\n                                        minute: '2-digit',\n                                        second: '2-digit'\n                                    }\n                                ).format(res.info.timestamp)\n                        });\n\n                        this.setState({\n                            clicked: true\n                        });\n                    } else if (!res) {\n                        this.setState({\n                            error: 'Failed to load response data'\n                        });\n\n                        this.setAPIError();\n                    } else {\n                        this.setState({\n                            error: res.error.info\n                        });\n\n                        this.setAPIError();\n                    }\n                },\n                (error) => {\n                    this.setState({\n                        error: error.toString()\n                    });\n\n                    this.setAPIError();\n                }\n            );\n\n        event.preventDefault();\n    };\n\n    render() {\n        return (\n            <form onSubmit={ this.onSubmit }>\n                <div className=\"form-row\">\n                    <Numeric action={ this.onChangeNumeric }\n                        display=\"Amount\"\n                        placeholder=\"Enter amount\"\n                        id=\"amount\"\n                        value={ this.state.amount }\n                        validations={ this.state.validations.amount }\n                    />\n\n                    <Dropdown action={ this.onChange }\n                        display=\"From\"\n                        id=\"from\"\n                        value={ this.state.from }\n                        options={ this.state.options }\n                        validations={ this.state.validations.from }\n                    />\n                    <Dropdown action={ this.onChange }\n                        display=\"To\"\n                        id=\"to\"\n                        value={ this.state.to }\n                        options={ this.state.options }\n                        validations={ this.state.validations.to }\n                    />\n\n                    <button\n                        className=\"btn btn-primary btn-lg btn-block\"\n                        type=\"submit\"\n                    >\n                        Convert\n                    </button>\n                </div>\n\n                <Summary\n                     timestamp={ this.state.timestamp }\n                     rate={ this.state.rate }\n                     result={ this.state.result }\n                     to={ this.state.to }\n                     from={ this.state.from }\n                     amount={ this.state.amount }\n                     clicked={ this.state.clicked }\n                     validations={ this.state.validations.amount }\n                />\n\n                <Message\n                    error={ this.state.error }\n                />\n            </form>\n        );\n    };\n}\n\nexport default Form;","import React from 'react';\nimport Header from './layout/Header';\nimport Form from './content/Form';\n\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n      const { header } = this.props;\n\n      return (\n          <div className=\"App\">\n              <Header title={ header } />\n              <Form />\n          </div>\n      );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n        header=\"Exchange rate app.\"\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}